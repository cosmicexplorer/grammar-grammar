/*
 * Description: Protocols for parser outputs.
 *
 * Copyright (C) 2022-2023 Danny McClanahan <dmcC2@hypnicjerk.ai>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

//! Protocols for parser outputs.

/* #![warn(missing_docs)] */
/* #![deny(rustdoc::missing_crate_level_docs)] */
/* Make all doctests fail if they produce any warnings. */
#![doc(test(attr(deny(warnings))))]
#![deny(clippy::all)]

use indexmap::IndexMap;

/* TODO: displaydoc! */
/// "argument specification" for a token
#[derive(Clone, Debug, PartialEq, Eq)]
pub enum ArgSpec {
  /// no arguments means each instance of this token is indistinguishable from the others
  NoArguments,
  /// may take some arguments sometimes
  SomeArguments,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct UniqueDescriptor(pub &'static str);

/// a class of tokens which may be emitted by some stream
#[derive(Clone, Debug)]
pub struct Token {
  pub unique_descriptor: UniqueDescriptor,
  pub arg_spec: ArgSpec,
}

#[derive(Clone, Debug)]
pub struct Registry {
  token_classes: IndexMap<UniqueDescriptor, Token>,
}

impl Registry {
  pub fn new() -> Self {
    Self {
      token_classes: IndexMap::new(),
    }
  }

  pub fn register_token(&mut self, token: Token) {
    self
      .token_classes
      .insert(token.unique_descriptor, token)
      .expect("key must be unique");
  }
}

pub trait Stream {
  fn registry(&self) -> &Registry;
}

pub trait Parser {
  type Input: Stream;
  type Output: Stream;
}

/// individual "parse entries" i.e. [`low_level::ParseEntry`] generated by an active parse will
/// reference a type-erased handle [`low_level::Symbol`] instead of a typed [`ArgSpec`] object.
pub mod low_level {
  /// internally generated handle to represent a [`super::Tuple`] instance
  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
  pub struct Symbol(pub usize);

  pub struct ParseEntry<I> {
    pub key: Symbol,
    pub args: Option<Vec<I>>,
  }
}
